# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'xxx.ui'
# Created by: PyQt5 UI code generator 5.15.1
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import cv2
import pickle
import threading
import sqlite3
import time
import json
from PyQt5.QtWebChannel import QWebChannel
from PyQt5.QtGui import *
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtWidgets import QApplication, QStackedLayout, QWidget


IMAGE =cv2.imread('qqq.png')
IMAGE1 =IMAGE.copy()


def get_img(lists):
    shrink = cv2.resize(IMAGE, (800, 600))
    # shrink = cv2.cvtColor(IMAGE, cv2.COLOR_BGR2RGB)
    for i in lists:
        if len(i)>=3:
            cv2.rectangle(shrink, (i[0], i[1]), (i[2], i[3]), (255, 0, 0), 2)
        else:
            cv2.circle(shrink, (i[0], i[1]), 1, (0, 255, 0), 2)
    QtImg = QImage(shrink,
                   shrink.shape[1],
                   shrink.shape[0],
                   shrink.shape[1] * 3,
                   QImage.Format_RGB888)
    return QtImg


class SQL:
    conn = None
    def __init__(self):
        self.conn =sqlite3.connect("test.db")
        sql ="CREATE TABLE if NOT EXISTS standard (id INTEGER PRIMARY KEY AUTOINCREMENT, standard_name varchar(20) unique, types varchar(10),wide varchar(10),long varchar(10),positive_url varchar(100),back_url varchar(100),created_time varchar(20),flag int(5) default 0)"
        self.execute(sql,flag=0)
        sql1 ="CREATE TABLE if NOT EXISTS dailydata (id INTEGER PRIMARY KEY AUTOINCREMENT, goodNum int(10) , badNum int(10),created_time varchar(20),standard_id INTEGER, FOREIGN KEY(standard_id) REFERENCES standard(id))"
        self.execute(sql1,flag=0)

    def _dict_factory(self, cursor, row):
        d = {}
        for idx, col in enumerate(cursor.description):
            d[col[0]] = row[idx]
        return d

    def _list_factory(self, cursor, row):
        return row[0]

    def execute(self,sql,args=[],flag=None,is_list=False):
        if is_list:
            self.conn.row_factory = self._list_factory
        else:
            self.conn.row_factory =self._dict_factory
        cur =self.conn.cursor()
        if args:
            sql =sql.format(*args)
        cur.execute(sql)
        self.conn.commit()
        if flag == 0:
            cur.close()
            print('创建成功')
        elif flag == 1:
            cur.close()
            print('插入成功')
        elif flag ==2:
            cur.close()
            print('更新成功')
        else:
            data =cur.fetchall()
            cur.close()
            return data


class MyThread(threading.Thread,QObject):
    breakSignal = pyqtSignal(bytes,list,list)
    def __init__(self):
        QObject.__init__(self)
        threading.Thread.__init__(self)
        self.Flag = True
        self.x = 0
        self.y = 0

    def run(self):
        while (True):
            if (not self.Flag):
                break
            else:
                print('thread is running')
                x1 = 0
                y1 = 0
                a=a1=self.y-30
                b=self.y+30
                c=c1=self.x-30
                d=self.x+30
                if a>600:
                    a = 600
                if a<0:
                    a = 0
                if b>600:
                    b = 600
                if b<0:
                    b = 0
                if c>800:
                    c = 800
                if c<0:
                    c = 0
                if d>800:
                    d = 800
                if d<0:
                    d = 0
                if a1<0:
                    x1= abs(60-abs(c-d))
                    y1= abs(60-abs(a-b))
                if a1>0 and c1<0 :
                    x1= abs(60-abs(c-d))
                if a !=b and c !=d:
                    shrink = cv2.resize(IMAGE1, (800, 600))
                    cropImg = shrink[a:b, c:d]
                    cropImg =pickle.dumps(cropImg)
                    self.breakSignal.emit(cropImg,[abs(a-b),abs(c-d)],[x1,y1])

    def setFlag(self, parm):
        self.Flag = parm

    def setParm(self, x, y):
        self.x = x
        self.y = y


class MyLabel(QLabel):
    changeValue = pyqtSignal(str)
    changeValue1 = pyqtSignal(list)
    def __init__(self, parent=None, *args, **kwargs):
        super(MyLabel, self).__init__(parent, *args, **kwargs)
        self.x0 = -100
        self.y0 = 0
        self.x1 = 0
        self.y1 = 0
        self.a = None
        self.b = None
        self.c = None
        self.d = None
        self.lists = []
        self.flag = False
        self.method = 'frames'
        self.pix = QPixmap(800, 600)
        self.temp = QPixmap()

    def paintEvent(self, event):
        """
        重载绘制事件。
        将self.pix中的内容复制到缓存中，在缓存上绘图。
        """
        if self.method == 'frames' and self.x0 != -100:
            x = self.x0
            y = self.y0
            w = self.x1 - self.x0
            h = self.y1 - self.y0
            self.temp = self.pix.copy()
            pp = QPainter(self.temp)
            pp.setPen(QPen(Qt.red, 2, Qt.SolidLine))
            pp.drawRect(x, y, w, h)
            painter = QPainter(self)
            painter.drawPixmap(0, 0, self.temp)
        elif self.method == 'spots' and self.x0 != -100:
            self.temp = self.pix.copy()
            pp = QPainter(self.temp)
            pp.setPen(QPen(Qt.green, 4))
            pp.drawPoint(self.x0, self.y0)
            painter = QPainter(self)
            painter.drawPixmap(0, 0, self.temp)
        else:
            self.temp = self.pix.copy()
            painter = QPainter(self)
            painter.drawPixmap(0, 0, self.temp)

    def mousePressEvent(self, event):
        """
        按下鼠标左键后，将当前位置存储到起点中。
        """
        self.flag = True
        self.x0 = event.x()
        self.y0 = event.y()
        self.a = self.x0
        self.b = self.y0

    def leaveEvent(self,event):
        self.changeValue.emit('no')

    def enterEvent(self, event):
        self.changeValue.emit('ok')

    def mouseMoveEvent(self, event):
        """
        鼠标左键被按下且在滑动中，调用绘图函数。
        """
        a = event.x()
        b = event.y()
        if self.flag:
            self.x1 = a
            self.y1 = b
            self.update()
        self.changeValue1.emit([a,b])

    def mouseReleaseEvent(self, event):
        """
        松开鼠标左键后，将当前位置存储到终点中；绘制图案，并将缓存中的内容更新到self.pix中。
        """
        self.flag = False
        self.x0 = event.x()
        self.y0 = event.y()
        self.c = self.x0
        self.d = self.y0
        if self.x0 <= 800 and self.y0 <= 600 and self.x0 >= 0 and self.y0 >= 0:
            if self.a != self.c or self.b != self.d:
                if self.method == 'frames':
                    e = [self.a, self.b, self.c, self.d]
                else:
                    e = [self.a, self.b]
                self.lists.append(e)
                img = get_img(self.lists)
                self.pix = QPixmap.fromImage(img)
                self.update()
                self.changeValue.emit(str(e))


class A(object):
    def setupUi(self, Form):
        Form.resize(1024, 768)
        self.gridLayout_2 = QtWidgets.QGridLayout(Form)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_2.addItem(spacerItem, 2, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout_2.addItem(spacerItem1, 0, 1, 1, 1)
        self.gridLayout = QtWidgets.QGridLayout()
        spacerItem2 = QtWidgets.QSpacerItem(20, 80, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout.addItem(spacerItem2, 1, 0, 1, 1)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setMinimumSize(QtCore.QSize(0, 50))
        self.label_4.setMaximumSize(QtCore.QSize(10000, 50))
        self.horizontalLayout_4.addWidget(self.label_4)
        self.lineEdit_4 = QtWidgets.QLineEdit(Form)
        self.lineEdit_4.setStyleSheet("border: 1px solid #696969;border-radius: 10px;font: 12pt '幼圆'")
        self.lineEdit_4.setMinimumSize(QtCore.QSize(200, 50))
        self.lineEdit_4.setMaximumSize(QtCore.QSize(300, 50))
        self.horizontalLayout_4.addWidget(self.lineEdit_4)
        self.gridLayout.addLayout(self.horizontalLayout_4, 2, 2, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.label_1 = QtWidgets.QLabel(Form)
        self.label_1.setMinimumSize(QtCore.QSize(0, 50))
        self.label_1.setMaximumSize(QtCore.QSize(10000, 50))
        self.horizontalLayout.addWidget(self.label_1)
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setStyleSheet("border: 1px solid #696969;border-radius: 10px;font: 12pt '幼圆'")
        self.lineEdit.setMinimumSize(QtCore.QSize(200, 50))
        self.lineEdit.setMaximumSize(QtCore.QSize(300, 50))
        self.horizontalLayout.addWidget(self.lineEdit)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setMinimumSize(QtCore.QSize(0, 50))
        self.label_3.setMaximumSize(QtCore.QSize(10000, 50))
        self.horizontalLayout_3.addWidget(self.label_3)
        self.lineEdit_2 = QtWidgets.QLineEdit(Form)
        self.lineEdit_2.setStyleSheet("border: 1px solid #696969;border-radius: 10px;font: 12pt '幼圆'")
        self.lineEdit_2.setMinimumSize(QtCore.QSize(200, 50))
        self.lineEdit_2.setMaximumSize(QtCore.QSize(300, 50))
        self.horizontalLayout_3.addWidget(self.lineEdit_2)
        self.gridLayout.addLayout(self.horizontalLayout_3, 2, 0, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setMinimumSize(QtCore.QSize(0, 50))
        self.label_2.setMaximumSize(QtCore.QSize(10000, 50))
        self.horizontalLayout_2.addWidget(self.label_2)
        self.lineEdit_3 = QtWidgets.QLineEdit(Form)
        self.lineEdit_3.setStyleSheet("border: 1px solid #696969;border-radius: 10px;font: 12pt '幼圆'")
        self.lineEdit_3.setMinimumSize(QtCore.QSize(200, 50))
        self.lineEdit_3.setMaximumSize(QtCore.QSize(300, 50))
        self.horizontalLayout_2.addWidget(self.lineEdit_3)
        self.gridLayout.addLayout(self.horizontalLayout_2, 0, 2, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem3, 0, 1, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 1, 1, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(120, 0, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem4, 1, 0, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(120, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem5, 1, 2, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label_4.setText(_translate("Form", "模板长度："))
        self.label_1.setText(_translate("Form", "模板名称："))
        self.label_3.setText(_translate("Form", "模板宽度："))
        self.label_2.setText(_translate("Form", "模板型号："))
        self.label_1.setStyleSheet("font: 9pt '幼圆'")
        self.label_2.setStyleSheet("font: 9pt '幼圆'")
        self.label_3.setStyleSheet("font: 9pt '幼圆'")
        self.label_4.setStyleSheet("font: 9pt '幼圆'")


class B(object):
    def setupUi(self, Form):
        Form.resize(1024, 768)
        self.gridLayout = QtWidgets.QGridLayout(Form)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.label = QtWidgets.QLabel(Form)
        self.label.setStyleSheet("background-color: rgb(255, 170, 0);")
        self.horizontalLayout.addWidget(self.label)
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setStyleSheet("background-color: rgb(0, 170, 255);")
        self.horizontalLayout.addWidget(self.label_2)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))


class C(object):
    def setupUi(self, Form):
        Form.resize(1024, 768)
        self.gridLayout = QtWidgets.QGridLayout(Form)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.lb = MyLabel()
        self.lb.setMinimumSize(QtCore.QSize(800, 600))
        self.lb.setMaximumSize(QtCore.QSize(800, 600))
        self.lb.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.lb.setCursor(Qt.CrossCursor)
        self.lb.setMouseTracking(True)
        self.horizontalLayout.addWidget(self.lb)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.pushButton_1 = QtWidgets.QPushButton(Form)
        self.pushButton_1.setMinimumSize(QtCore.QSize(100, 48))
        self.pushButton_1.setMaximumSize(QtCore.QSize(100, 48))
        self.pushButton_1.setStyleSheet(
                                        "text-align : center;background-color : white;font: bold; border-color: gray;border-width: 2px;border-radius: 10px;padding: 6px;height : 14px;border-style: outset;font: 10pt '幼圆';}\n"
                                        "QPushButton:pressed{text-align : center;background-color : light gray;color:red;border-color: gray;border-width: 2px;border-radius: 10px;padding: 6px;height : 14px;border-style: outset;\n"
                                        "")
        self.pushButton_1.clicked.connect(self.frames)
        self.verticalLayout.addWidget(self.pushButton_1)
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setMinimumSize(QtCore.QSize(100, 48))
        self.pushButton_2.setMaximumSize(QtCore.QSize(100, 48))
        self.pushButton_2.setStyleSheet(
                                        "text-align : center;background-color : white;font: bold; border-color: gray;border-width: 2px;border-radius: 10px;padding: 6px;height : 14px;border-style: outset;font: 10pt '幼圆';}\n"
                                        "QPushButton:pressed{text-align : center;background-color : light gray;color:red;border-color: gray;border-width: 2px;border-radius: 10px;padding: 6px;height : 14px;border-style: outset;\n"
                                        "")
        self.pushButton_2.clicked.connect(self.spots)
        self.verticalLayout.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setMinimumSize(QtCore.QSize(100, 48))
        self.pushButton_3.setMaximumSize(QtCore.QSize(100, 48))
        self.pushButton_3.setStyleSheet(
                                        "text-align : center;background-color : white;font: bold; border-color: gray;border-width: 2px;border-radius: 10px;padding: 6px;height : 14px;border-style: outset;font: 10pt '幼圆';}\n"
                                        "QPushButton:pressed{text-align : center;background-color : light gray;color:red;border-color: gray;border-width: 2px;border-radius: 10px;padding: 6px;height : 14px;border-style: outset;\n"
                                        "")
        self.pushButton_3.clicked.connect(self.revoke)
        self.verticalLayout.addWidget(self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(Form)
        self.pushButton_4.setMinimumSize(QtCore.QSize(100, 48))
        self.pushButton_4.setMaximumSize(QtCore.QSize(100, 48))
        self.pushButton_4.setStyleSheet(
                                        "text-align : center;background-color : white;font: bold; border-color: gray;border-width: 2px;border-radius: 10px;padding: 6px;height : 14px;border-style: outset;font: 10pt '幼圆';}\n"
                                        "QPushButton:pressed{text-align : center;background-color : light gray;color:red;border-color: gray;border-width: 2px;border-radius: 10px;padding: 6px;height : 14px;border-style: outset;\n"
                                        "")
        self.pushButton_4.clicked.connect(self.reset)
        self.verticalLayout.addWidget(self.pushButton_4)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout.addItem(spacerItem)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        self.label = QtWidgets.QLabel(Form)
        self.label.setMinimumSize(QtCore.QSize(360, 360))
        self.label.setMaximumSize(QtCore.QSize(360, 360))
        self.label.setStyleSheet("background-color: rgb(255, 255, 255);border: 1px solid #EDEDED")
        self.verticalLayout_2.addWidget(self.label)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.verticalLayout_3.addLayout(self.horizontalLayout)
        self.textBrowser = QtWidgets.QTextBrowser(Form)
        self.textBrowser.setStyleSheet("background-color: white;border: 1px solid #EDEDED;font: 14pt '幼圆'")
        self.textBrowser.setGeometry(QtCore.QRect(0, 0, 1162, 85))
        font = QFont()
        font.setFamily("宋体")
        self.textBrowser.setFont(font)
        self.lb.changeValue.connect(self.getValue)
        self.lb.changeValue1.connect(self.getValue1)
        self.verticalLayout_3.addWidget(self.textBrowser)
        self.gridLayout.addLayout(self.verticalLayout_3, 0, 0, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton_1.setText(_translate("Form", "画框"))
        self.pushButton_2.setText(_translate("Form", "画点"))
        self.pushButton_3.setText(_translate("Form", "撤销"))
        self.pushButton_4.setText(_translate("Form", "重置"))

    def spots(self):
        self.lb.method = 'spots'
        self.lb.x0 = -100
        self.lb.update()

    def frames(self):
        self.lb.method = 'frames'
        self.lb.x0 = -100
        self.lb.update()

    def revoke(self):
        if len(self.lb.lists) != 0:
            self.lb.x0 = -100
            num = len(str(self.lb.lists[-1])) + 4
            self.lb.lists.pop()
            img = get_img(self.lb.lists)
            self.lb.pix = QPixmap.fromImage(img)
            self.lb.temp = QPixmap.fromImage(img)
            self.lb.update()
            if len(self.lb.lists) == 0:
                self.textBrowser.clear()
            else:
                lastLine = self.textBrowser.textCursor()
                end = lastLine.position() - num
                lastLine.setPosition(end, QTextCursor.KeepAnchor)
                lastLine.removeSelectedText()
        else:
            pass

    def reset(self):
        self.lb.x0 = -100
        self.lb.lists = []
        img = get_img(self.lb.lists)
        self.lb.pix = QPixmap.fromImage(img)
        self.lb.temp = QPixmap.fromImage(img)
        self.lb.update()
        self.textBrowser.clear()

    def getValue(self,e):
        if e == 'ok':
            self.t = MyThread()
            self.t.breakSignal.connect(self.getValue2)
            self.t.setDaemon(True)
            self.t.start()
        elif e == 'no':
            self.t.setFlag(False)
        else:
            self.textBrowser.insertPlainText(str(e))
            self.textBrowser.insertPlainText('    ')

    def getValue1(self,e):
        self.t.setParm(e[0],e[1])

    def getValue2(self,e,e1,e2):
        e =pickle.loads(e)
        shrink = cv2.resize(e, (e1[1]*6, e1[0]*6))
        cv2.circle(shrink, (abs(180-e2[0]*6),abs(180-e2[1]*6)), 1, (255, 0, 0), 2)
        QtImg = QImage(shrink.data,
                      shrink.shape[1],
                      shrink.shape[0],
                      shrink.shape[1] * 3,
                      QImage.Format_RGB888)
        self.label.setPixmap(QPixmap.fromImage(QtImg))
        self.label.show()


class D(object):
    def setupUi(self, Form):
        Form.resize(1024, 768)
        self.gridLayout = QtWidgets.QGridLayout(Form)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.lb1 = MyLabel()
        self.lb1.setMinimumSize(QtCore.QSize(800, 600))
        self.lb1.setMaximumSize(QtCore.QSize(800, 600))
        self.lb1.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.lb1.setCursor(Qt.CrossCursor)
        self.lb1.setMouseTracking(True)
        self.horizontalLayout.addWidget(self.lb1)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.pushButton_1 = QtWidgets.QPushButton(Form)
        self.pushButton_1.setMinimumSize(QtCore.QSize(100, 48))
        self.pushButton_1.setMaximumSize(QtCore.QSize(100, 48))
        self.pushButton_1.setStyleSheet(
                                        "text-align : center;background-color : white;font: bold; border-color: gray;border-width: 2px;border-radius: 10px;padding: 6px;height : 14px;border-style: outset;font: 10pt '幼圆';}\n"
                                        "QPushButton:pressed{text-align : center;background-color : light gray;color:red;border-color: gray;border-width: 2px;border-radius: 10px;padding: 6px;height : 14px;border-style: outset;\n"
                                        "")
        self.pushButton_1.clicked.connect(self.frames)
        self.verticalLayout.addWidget(self.pushButton_1)
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setMinimumSize(QtCore.QSize(100, 48))
        self.pushButton_2.setMaximumSize(QtCore.QSize(100, 48))
        self.pushButton_2.setStyleSheet(
                                        "text-align : center;background-color : white;font: bold; border-color: gray;border-width: 2px;border-radius: 10px;padding: 6px;height : 14px;border-style: outset;font: 10pt '幼圆';}\n"
                                        "QPushButton:pressed{text-align : center;background-color : light gray;color:red;border-color: gray;border-width: 2px;border-radius: 10px;padding: 6px;height : 14px;border-style: outset;\n"
                                        "")
        self.pushButton_2.clicked.connect(self.spots)
        self.verticalLayout.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setMinimumSize(QtCore.QSize(100, 48))
        self.pushButton_3.setMaximumSize(QtCore.QSize(100, 48))
        self.pushButton_3.setStyleSheet(
                                        "text-align : center;background-color : white;font: bold; border-color: gray;border-width: 2px;border-radius: 10px;padding: 6px;height : 14px;border-style: outset;font: 10pt '幼圆';}\n"
                                        "QPushButton:pressed{text-align : center;background-color : light gray;color:red;border-color: gray;border-width: 2px;border-radius: 10px;padding: 6px;height : 14px;border-style: outset;\n"
                                        "")
        self.pushButton_3.clicked.connect(self.revoke)
        self.verticalLayout.addWidget(self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(Form)
        self.pushButton_4.setMinimumSize(QtCore.QSize(100, 48))
        self.pushButton_4.setMaximumSize(QtCore.QSize(100, 48))
        self.pushButton_4.setStyleSheet(
                                        "text-align : center;background-color : white;font: bold; border-color: gray;border-width: 2px;border-radius: 10px;padding: 6px;height : 14px;border-style: outset;font: 10pt '幼圆';}\n"
                                        "QPushButton:pressed{text-align : center;background-color : light gray;color:red;border-color: gray;border-width: 2px;border-radius: 10px;padding: 6px;height : 14px;border-style: outset;\n"
                                        "")
        self.pushButton_4.clicked.connect(self.reset)
        self.verticalLayout.addWidget(self.pushButton_4)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout.addItem(spacerItem)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        self.label = QtWidgets.QLabel(Form)
        self.label.setMinimumSize(QtCore.QSize(360, 360))
        self.label.setMaximumSize(QtCore.QSize(360, 360))
        self.label.setStyleSheet("background-color: rgb(255, 255, 255);border: 1px solid #EDEDED")
        self.verticalLayout_2.addWidget(self.label)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.verticalLayout_3.addLayout(self.horizontalLayout)
        self.textBrowser = QtWidgets.QTextBrowser(Form)
        self.textBrowser.setStyleSheet("background-color: white;border: 1px solid #EDEDED;font: 14pt '幼圆'")
        self.textBrowser.setGeometry(QtCore.QRect(0, 0, 1162, 85))
        font = QFont()
        font.setFamily("宋体")
        self.textBrowser.setFont(font)
        self.lb1.changeValue.connect(self.getValue)
        self.lb1.changeValue1.connect(self.getValue1)
        self.verticalLayout_3.addWidget(self.textBrowser)
        self.gridLayout.addLayout(self.verticalLayout_3, 0, 0, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton_1.setText(_translate("Form", "画框"))
        self.pushButton_2.setText(_translate("Form", "画点"))
        self.pushButton_3.setText(_translate("Form", "撤销"))
        self.pushButton_4.setText(_translate("Form", "重置"))

    def spots(self):
        self.lb1.method = 'spots'
        self.lb1.x0 = -100
        self.lb1.update()

    def frames(self):
        self.lb1.method = 'frames'
        self.lb1.x0 = -100
        self.lb1.update()

    def revoke(self):
        if len(self.lb1.lists) != 0:
            self.lb1.x0 = -100
            num = len(str(self.lb1.lists[-1])) + 4
            self.lb1.lists.pop()
            img = get_img(self.lb1.lists)
            self.lb1.pix = QPixmap.fromImage(img)
            self.lb1.temp = QPixmap.fromImage(img)
            self.lb1.update()
            if len(self.lb1.lists) == 0:
                self.textBrowser.clear()
            else:
                lastLine = self.textBrowser.textCursor()
                end = lastLine.position() - num
                lastLine.setPosition(end, QTextCursor.KeepAnchor)
                lastLine.removeSelectedText()
        else:
            pass

    def reset(self):
        self.lb1.x0 = -100
        self.lb1.lists = []
        img = get_img(self.lb1.lists)
        self.lb1.pix = QPixmap.fromImage(img)
        self.lb1.temp = QPixmap.fromImage(img)
        self.lb1.update()
        self.textBrowser.clear()

    def getValue(self,e):
        if e == 'ok':
            self.t1 = MyThread()
            self.t1.breakSignal.connect(self.getValue2)
            self.t1.setDaemon(True)
            self.t1.start()
        elif e == 'no':
            self.t1.setFlag(False)
        else:
            self.textBrowser.insertPlainText(str(e))
            self.textBrowser.insertPlainText('    ')

    def getValue1(self,e):
        self.t1.setParm(e[0],e[1])

    def getValue2(self,e,e1,e2):
        e =pickle.loads(e)
        shrink = cv2.resize(e, (e1[1]*6, e1[0]*6))
        cv2.circle(shrink, (abs(180-e2[0]*6),abs(180-e2[1]*6)), 1, (255, 0, 0), 2)
        QtImg = QImage(shrink.data,
                      shrink.shape[1],
                      shrink.shape[0],
                      shrink.shape[1] * 3,
                      QImage.Format_RGB888)
        self.label.setPixmap(QPixmap.fromImage(QtImg))
        self.label.show()


class TabBar(QtWidgets.QTabBar):
    def tabSizeHint(self, index):
        s = QtWidgets.QTabBar.tabSizeHint(self, index)
        s.transpose()
        return s

    def paintEvent(self, event):
        painter = QtWidgets.QStylePainter(self)
        opt = QtWidgets.QStyleOptionTab()

        for i in range(self.count()):
            self.initStyleOption(opt, i)
            painter.drawControl(QtWidgets.QStyle.CE_TabBarTabShape, opt)
            painter.save()

            s = opt.rect.size()
            s.transpose()
            r = QtCore.QRect(QtCore.QPoint(), s)
            r.moveCenter(opt.rect.center())
            opt.rect = r

            c = self.tabRect(i).center()
            painter.translate(c)
            painter.rotate(90)
            painter.translate(-c)
            painter.drawControl(QtWidgets.QStyle.CE_TabBarTabLabel, opt);
            painter.restore()


class TabWidget(QtWidgets.QTabWidget):
    def __init__(self, *args, **kwargs):
        QtWidgets.QTabWidget.__init__(self, *args, **kwargs)
        self.setTabBar(TabBar(self))
        self.setTabPosition(QtWidgets.QTabWidget.West)
        self.setStyleSheet(
            "QTabBar::tab {height:170;font: 14pt '幼圆'}\n"
            "QTabBar::tab {width:90} \n"
            )


class FramePage1(QWidget, A):
    def __init__(self):
        super().__init__()
        self.setupUi(self)


class FramePage2(QWidget, B):
    def __init__(self):
        super().__init__()
        self.setupUi(self)


class FramePage3(QWidget, C):
    def __init__(self):
        super().__init__()
        self.setupUi(self)


class FramePage4(QWidget, D):
    def __init__(self):
        super().__init__()
        self.setupUi(self)


class Print(QObject):
    changeList = pyqtSignal(str)
    @pyqtSlot(str, result=str)
    def print(self, content):
        self.changeList.emit(content)
        print(content)
        return content


class Print1(QObject):
    changeList1 = pyqtSignal(str)
    @pyqtSlot(str, result=str)
    def print(self, content):
        self.changeList1.emit(content)
        print(content)
        return content


class Ui_Form(QWidget,SQL):
    def __init__(self):
        self.standard_now =None
        self.message = ['', '', '', '', '', '', '', '']
        super().__init__()
        self.setupUi()
        self.qsl = QStackedLayout(self.frame)
        # 实例化分页面
        self.Page1 = FramePage1()
        self.Page2 = FramePage2()
        self.Page3 = FramePage3()
        self.Page4 = FramePage4()
        # 加入到布局中
        self.qsl.addWidget(self.Page1)
        self.qsl.addWidget(self.Page2)
        self.qsl.addWidget(self.Page3)
        self.qsl.addWidget(self.Page4)
        # 控制函数
        self.controller()

    def controller(self):
        self.pushButton4.clicked.connect(self.switch)
        self.pushButton5.clicked.connect(self.switch)
        self.pushButton6.clicked.connect(self.switch)
        self.pushButton7.clicked.connect(self.switch)
        self.pushButton8.clicked.connect(self.switch)

    def switch(self):
        sender = self.sender().objectName()
        index = {
            "Page0":0,
            "Page1": 1,
            "Page2": 2,
            "Page3": 3,
            "Page4": 0,
        }
        if sender == "Page0":
            self.Page1.lineEdit.clear()
            self.Page1.lineEdit_2.clear()
            self.Page1.lineEdit_3.clear()
            self.Page1.lineEdit_4.clear()
            self.pushButton4.setEnabled(False)
            self.pushButton5.setEnabled(True)
            self.pushButton6.setEnabled(False)
            self.pushButton7.setEnabled(False)
            self.pushButton8.setEnabled(False)
            self.message = ['', '', '', '', '', '', '']
            #数据都清空
            self.qsl.setCurrentIndex(index[sender])
        elif sender == "Page1":
            self.name=self.Page1.lineEdit.text()
            self.type=self.Page1.lineEdit_3.text()
            self.long=self.Page1.lineEdit_2.text()
            self.wide=self.Page1.lineEdit_4.text()
            if self.wide and self.long and self.name and self.type:
                # m =re.match('\d+(?:\.\d+)?',self.wide)
                # n = re.match('\d+(?:\.\d+)?', self.long)
                m =self.wide.isdigit()
                n =self.long.isdigit()
                if m and n:
                    sql1 = 'select standard_name from standard where flag !=2 and standard_name ={}'.format('"'+self.name+'"')
                    res = self.execute(sql1, is_list=True)
                    if res == []:
                        self.message[0]=self.name
                        self.message[1] = self.type
                        self.message[2] = self.long
                        self.message[3] = self.wide
                        self.pushButton5.setEnabled(False)
                        self.pushButton4.setEnabled(True)
                        self.qsl.setCurrentIndex(index[sender])
                        self.Page1.lineEdit.clear()
                        self.Page1.lineEdit_2.clear()
                        self.Page1.lineEdit_3.clear()
                        self.Page1.lineEdit_4.clear()
                        #线程走流程获取图片
                        self.pushButton6.setEnabled(True)#等到数据回传后
                    else:
                        reply = QMessageBox.information(self, '信息', '模板名称重复',
                                                     QMessageBox.Yes | QMessageBox.No)
                else:
                    reply = QMessageBox.information(self, '信息', '数据不符',
                                                    QMessageBox.Yes | QMessageBox.No)
            else:
                reply = QMessageBox.information(self, '信息', '数据未填完整',
                                                QMessageBox.Yes | QMessageBox.No)
        elif sender == "Page2":
            self.pushButton6.setEnabled(False)
            self.pushButton7.setEnabled(True)
            self.qsl.setCurrentIndex(index[sender])
            #label图片清除，lb图设置
        elif sender == "Page3":
            self.pushButton7.setEnabled(False)
            self.pushButton8.setEnabled(True)
            self.qsl.setCurrentIndex(index[sender])
            #获取标注的数据，lb图，text清空，lb1图设置
        else:
            self.pushButton4.setEnabled(False)
            self.pushButton6.setEnabled(False)
            self.pushButton7.setEnabled(False)
            self.pushButton8.setEnabled(False)
            self.pushButton5.setEnabled(True)
            #存坐标，入库,lb1图，text清空
            t = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
            sql ='insert into standard values(null,"{}","{}","{}","{}","{}","{}","{}",0)'
            arge =[self.message[0],self.message[1],self.message[2],self.message[3],self.message[4],self.message[5],t]
            self.execute(sql,arge,flag=1)
            self.qsl.setCurrentIndex(index[sender])

    def setupUi(self):
        self.resize(1410, 958)
        self.setMinimumSize(QtCore.QSize(1410, 958))
        self.gridLayout = QtWidgets.QGridLayout(self)
        self.Tab = TabWidget()
        self.Tab.currentChanged.connect(self.slot_small_tab)
        self.tab1 = QtWidgets.QWidget()
        self.tab2 = QtWidgets.QWidget()
        self.tab3 = QtWidgets.QWidget()
        self.tab4 = QtWidgets.QWidget()
        # tab1
        self.gridLayout_1 = QtWidgets.QGridLayout(self.tab1)
        self.frame = QtWidgets.QFrame(self.tab1)
        self.frame.setMinimumSize(QtCore.QSize(0, 680))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.gridLayout_1.addWidget(self.frame, 0, 0, 1, 1)
        self.widget = QtWidgets.QWidget(self.tab1)
        self.widget.setStyleSheet("background-color: #EDEDED;border: 1px solid #EDEDED;border-radius: 10px;padding:3px")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.pushButton5 = QtWidgets.QPushButton(self.widget)
        self.pushButton5.setMinimumSize(QtCore.QSize(100, 50))
        self.pushButton5.setMaximumSize(QtCore.QSize(100, 50))
        self.pushButton5.setObjectName("Page1")
        self.pushButton5.setStyleSheet( "background-color:qlineargradient(x1:0, y1:0, x2:0, y2:1, stop: 0 #E5E5E5, stop: 1 #B7B7B7);border: 1px solid #EDEDED;border-radius: 10px;padding:3px;font: 9pt '幼圆'")
        self.horizontalLayout.addWidget(self.pushButton5)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.pushButton6 = QtWidgets.QPushButton(self.widget)
        self.pushButton6.setMinimumSize(QtCore.QSize(100, 50))
        self.pushButton6.setMaximumSize(QtCore.QSize(100, 50))
        self.pushButton6.setEnabled(False)
        self.pushButton6.setObjectName("Page2")
        self.pushButton6.setStyleSheet("background-color:qlineargradient(x1:0, y1:0, x2:0, y2:1, stop: 0 #E5E5E5, stop: 1 #B7B7B7);border: 1px solid #EDEDED;border-radius: 10px;padding:3px;font: 9pt '幼圆'")
        self.horizontalLayout.addWidget(self.pushButton6)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.pushButton7 = QtWidgets.QPushButton(self.widget)
        self.pushButton7.setMinimumSize(QtCore.QSize(100, 50))
        self.pushButton7.setMaximumSize(QtCore.QSize(100, 50))
        self.pushButton7.setEnabled(False)
        self.pushButton7.setObjectName("Page3")
        self.pushButton7.setStyleSheet("background-color:qlineargradient(x1:0, y1:0, x2:0, y2:1, stop: 0 #E5E5E5, stop: 1 #B7B7B7);border: 1px solid #EDEDED;border-radius: 10px;padding:3px;font: 9pt '幼圆'")
        self.horizontalLayout.addWidget(self.pushButton7)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.pushButton8 = QtWidgets.QPushButton(self.widget)
        self.pushButton8.setMinimumSize(QtCore.QSize(100, 50))
        self.pushButton8.setMaximumSize(QtCore.QSize(100, 50))
        self.pushButton8.setEnabled(False)
        self.pushButton8.setObjectName("Page4")
        self.pushButton8.setStyleSheet("background-color:qlineargradient(x1:0, y1:0, x2:0, y2:1, stop: 0 #E5E5E5, stop: 1 #B7B7B7);border: 1px solid #EDEDED;border-radius: 10px;padding:3px;font: 9pt '幼圆'")
        self.horizontalLayout.addWidget(self.pushButton8)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem3)
        self.horizontalLayout_2.addLayout(self.horizontalLayout)
        self.pushButton4 = QtWidgets.QPushButton(self.widget)
        self.pushButton4.setMinimumSize(QtCore.QSize(100, 100))
        self.pushButton4.setMaximumSize(QtCore.QSize(100, 100))
        self.pushButton4.setEnabled(False)
        self.pushButton4.setObjectName("Page0")
        self.pushButton4.setStyleSheet("background-color:qlineargradient(x1:0, y1:0, x2:0, y2:1, stop: 0 #E5E5E5, stop: 1 #B7B7B7);border: 1px solid #EDEDED;border-radius: 10px;padding:3px;font: 12pt '幼圆'")
        self.horizontalLayout_2.addWidget(self.pushButton4)
        self.gridLayout_2.addLayout(self.horizontalLayout_2, 0, 0, 1, 1)
        self.gridLayout_1.addWidget(self.widget, 1, 0, 1, 1)
        self.Tab.addTab(self.tab1, "录入")
        # tab2
        self.gridLayout_2 = QtWidgets.QGridLayout(self.tab2)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.label1 = QtWidgets.QWidget(self.tab2)
        self.label1.setMinimumSize(QtCore.QSize(420, 500))
        self.label1.setStyleSheet( "background-color: rgb(170, 170, 255);border: 0px solid #EDEDED;border-radius: 5px")
        self.horizontalLayout_4.addWidget(self.label1)
        self.label2 = QtWidgets.QWidget(self.tab2)
        self.label2.setMinimumSize(QtCore.QSize(420, 500))
        self.label2.setStyleSheet( "background-color: rgb(170, 85, 255);border: 0px solid #EDEDED;border-radius: 5px")
        self.horizontalLayout_4.addWidget(self.label2)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.formLayout = QtWidgets.QFormLayout()
        self.label = QtWidgets.QLabel(self.tab2)
        self.label.setStyleSheet( "font: 16pt '幼圆';color:red")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setMinimumSize(QtCore.QSize(420, 100))
        self.label.setMaximumSize(QtCore.QSize(10000, 100))
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label)
        self.horizontalLayout_1 = QtWidgets.QHBoxLayout()
        self.comboBox = QtWidgets.QComboBox(self.tab2)
        self.comboBox.setStyleSheet( "font: 10pt '幼圆'")
        self.comboBox.setMinimumSize(QtCore.QSize(320, 50))
        self.comboBox.setMaximumSize(QtCore.QSize(360, 50))
        self.horizontalLayout_1.addWidget(self.comboBox)
        self.pushButton3 = QtWidgets.QPushButton(self.tab2)
        self.pushButton3.clicked.connect(self.change_standard)
        self.pushButton3.setStyleSheet("background-color:qlineargradient(x1:0, y1:0, x2:0, y2:1, stop: 0 #E5E5E5, stop: 1 #B7B7B7);border: 1px solid #EDEDED;border-radius: 10px;padding:3px;font: 12pt '幼圆'")
        self.pushButton3.setMinimumSize(QtCore.QSize(120, 50))
        self.pushButton3.setMaximumSize(QtCore.QSize(150, 50))
        self.horizontalLayout_1.addWidget(self.pushButton3)
        self.formLayout.setLayout(1, QtWidgets.QFormLayout.LabelRole, self.horizontalLayout_1)
        self.horizontalLayout_3.addLayout(self.formLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.pushButton1 = QtWidgets.QPushButton(self.tab2)
        self.pushButton1.clicked.connect(self.push1)
        self.pushButton1.setStyleSheet("background-color:qlineargradient(x1:0, y1:0, x2:0, y2:1, stop: 0 #E5E5E5, stop: 1 #B7B7B7);border: 1px solid #EDEDED;border-radius: 10px;padding:3px;font: 12pt '幼圆'}\n")
        self.pushButton1.setMinimumSize(QtCore.QSize(100, 100))
        self.pushButton1.setMaximumSize(QtCore.QSize(200, 16777215))
        self.horizontalLayout_2.addWidget(self.pushButton1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.pushButton2 = QtWidgets.QPushButton(self.tab2)
        self.pushButton2.clicked.connect(self.push2)
        self.pushButton2.setStyleSheet("background-color:qlineargradient(x1:0, y1:0, x2:0, y2:1, stop: 0 #E5E5E5, stop: 1 #B7B7B7);border: 1px solid #EDEDED;border-radius: 10px;padding:3px;font: 12pt '幼圆'")
        self.pushButton2.setMinimumSize(QtCore.QSize(100, 100))
        self.pushButton2.setMaximumSize(QtCore.QSize(200, 16777215))
        self.horizontalLayout_2.addWidget(self.pushButton2)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.horizontalLayout_3.addLayout(self.horizontalLayout_2)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.gridLayout_2.addLayout(self.verticalLayout, 0, 0, 1, 1)
        self.Tab.addTab(self.tab2, "运行")
        # tab3
        self.gridLayout_3 = QtWidgets.QGridLayout(self.tab3)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.his = QWebEngineView(self.tab3)
        self.channel = QWebChannel()  # 增加一个通信频道
        self.printer = Print()  # 通信功能类
        self.printer.changeList.connect(self.getlist)
        self.channel.registerObject('printer', self.printer)
        self.his.page().setWebChannel(self.channel)
        self.his.load(QUrl("file:///./history.html"))
        self.gridLayout_3.addWidget(self.his, 0, 0, 1, 1)
        self.Tab.addTab(self.tab3, "模板档案")
        # tab4
        self.gridLayout_4 = QtWidgets.QGridLayout(self.tab4)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.ech = QWebEngineView(self.tab4)
        self.channel1 = QWebChannel()  # 增加一个通信频道
        self.printer1 = Print1()  # 通信功能类
        self.printer1.changeList1.connect(self.getlist1)
        self.channel1.registerObject('printer1', self.printer1)  # 将功能类注册到频道中，在网页中作为标识
        self.ech.page().setWebChannel(self.channel1)
        self.ech.load(QUrl("file:///./home.html"))
        self.gridLayout_4.addWidget(self.ech, 0, 0, 1, 1)
        self.Tab.addTab(self.tab4, "数据分析")
        ##
        self.gridLayout.addWidget(self.Tab, 0, 0, 1, 1)
        self.retranslateUi()
        self.Tab.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.pushButton4.setText(_translate("Form", "重新录入"))
        self.pushButton5.setText(_translate("Form", "基础数据确认"))
        self.pushButton6.setText(_translate("Form", "标准图片确认"))
        self.pushButton7.setText(_translate("Form", "正面数据确认"))
        self.pushButton8.setText(_translate("Form", "背面数据确认"))
        self.setWindowTitle(_translate("Form", "手机膜片检测"))
        self.label.setText(_translate("Form", "当前使用模板："))
        self.pushButton3.setText(_translate("Form", "确定"))
        self.pushButton1.setText(_translate("Form", "运行"))
        self.pushButton2.setText(_translate("Form", "停止"))

    #开始
    def push1(self):
        if self.standard_now !=None:
            t = time.strftime("%Y-%m-%d", time.localtime())
            sql ='select * from dailydata where standard_id ={} and created_time ={}'.format(self.standard_now,'"'+t+'"')
            re =self.execute(sql)
            if not re:
                sql ='insert into dailydata values(null,0,0,"{}",{})'
                args = [t,self.standard_now]
                self.execute(sql, args, flag=1)
            self.pushButton1.setStyleSheet("background-color:qlineargradient(x1:0, y1:0, x2:0, y2:1, stop: 0 #E5E5E5, stop: 1 #B7B7B7);border: 2px solid red;border-radius: 10px;padding:3px;font: 12pt '幼圆';color:red}\n")
        else:
            reply = QMessageBox.information(self, '信息', '请选择模板',
                                            QMessageBox.Yes | QMessageBox.No)
    #结束
    def push2(self):
        self.pushButton1.setStyleSheet("background-color:qlineargradient(x1:0, y1:0, x2:0, y2:1, stop: 0 #E5E5E5, stop: 1 #B7B7B7);border: 1px solid #EDEDED ;border-radius: 10px;padding:3px;font: 12pt '幼圆';color:black}\n")

    #修改当前标准件，运行过程中禁止修改
    def change_standard(self):
        text = self.comboBox.currentText()
        if text !="请选择模板":
            sql = 'update standard set flag=0 where flag =1'
            self.execute(sql,flag=2)
            sql1 ='update standard set flag=1 where flag !=2 and standard_name= {}'.format('"'+text+'"')
            self.execute(sql1,flag=2)
            self.label.setText("当前使用模板:"+text)
            sql1 ='select id from standard  where flag =1 and standard_name= {}'.format('"'+text+'"')
            ID =self.execute(sql1)
            self.standard_now = ID[0]["id"]
        else:
            pass

    def slot_small_tab(self):
        # 获取列表
        if self.Tab.currentIndex() == 2:
            sql = 'select id,standard_name,types,positive_url,back_url,created_time from  standard where flag != 2'
            lists = self.execute(sql)
            self.his.page().runJavaScript("window.uptext('{}')".format(json.dumps(lists)))
        elif self.Tab.currentIndex() == 1:
            sql = 'select id,standard_name from standard where flag =1'
            name =self.execute(sql)
            if name !=[]:
                self.label.setText("当前使用模板:"+name[0]["standard_name"])
                self.standard_now =name[0]["id"]
            else:
                self.label.setText("当前使用模板:")
                self.standard_now =None
            sql1 = 'select standard_name from standard where flag !=2'
            name = self.execute(sql1, is_list=True)
            self.comboBox.clear()
            self.comboBox.addItem('请选择模板')
            for i in name:
                self.comboBox.addItem(i)
        # 获取图表数据
        elif self.Tab.currentIndex() == 3:
            print('获取图表数据')
        else:
            pass

    def getlist(self,e):
        if e.isdigit():
            sql ='update standard set flag=2 where id ={}'.format(int(e))
            self.execute(sql,flag =2)
            sql = 'select id,standard_name,types,positive_url,back_url,created_time from  standard where flag != 2'
            lists = self.execute(sql)
            self.his.page().runJavaScript("window.uptext('{}')".format(json.dumps(lists)))
        else:
            sql = "SELECT id,standard_name,types,positive_url,back_url,created_time from standard where flag !=2 and standard_name like '%" + e +"%'"
            lists = self.execute(sql)
            self.his.page().runJavaScript("window.uptext('{}')".format(json.dumps(lists)))

    def getlist1(self,e):
        pass


if __name__ == "__main__":
    app = QApplication(sys.argv)
    form = Ui_Form()
    form.show()
    form.setMouseTracking(True)
    # form.showFullScreen()
    sys.exit(app.exec_())

